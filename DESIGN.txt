"Second, in a plain text file (named DESIGN.txt) list each of the methods that was left in the Functions class and give a brief justification for why this method was not moved. You should also list each method that you feel could be reasonably placed in multiple classes and note 1) the class you selected and 2) the reason for that selection. You do not need to add many functions to this file - I will go over which ones you may want to include in class."

getCurrentImage: split between Background and Entity because accessed from both types

load + processLine + processImageLine + parse*: In Functions because world isn't doing the action or has any data needed, the
functions are just reading text to parse into the game world

addEntity + removeEntity + moveEntity: In world instead of entity because it's changing a property in world,
    putting in Entity would be confusing whether it was constructing an entity object or adding to world

withinBounds: in Point instead of World because it's checking if the point is in the world

shiftView: has to be static because cannot call non-static function from static VirtualWorld (had to add getters/setters
to reference viewport)

getImages + setAlpha: has no reference to any other class methods or data, so just kept in Functions

findNearest + nearestEntity: could be in WorldModel, but in Point because finding nearest entity in the world with respect to the point

clamp: in Functions because static, does not relate directly to any classes